1003. 我要通过！(20)

“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。
得到“答案正确”的条件是：
1. 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；
2. 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；
3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。
现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。

输入格式： 每个测试输入包含1个测试用例。第1行给出一个自然数n (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。
输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。

输入样例：
8
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
输出样例：
YES
YES
YES
YES
NO
NO
NO
NO
提交代码

条件一最最基本，暂且不管。条件二，xPATx 就是正确的形式；在此基础上，如果 aPbTc 是正确的，那么 aPbATca 也是正确的。如果二者放在一起考虑，就是中间每
增加一个A，后面就增加一个a，似乎数学关系出来了。我们知道aPbTc中a b c 段都只能包含“A"，其长度分别为len(a)、len(b)、len(c)，则其关系满足
len(a)*len(b) = len(c)！这完美的契合了条件二与条件三，xPATx 就是当len(b) = 1的情况，在此基础上演化到条件三b中每增加一个A，c中相应增加len(a)个A，
即len(a)*(len(b')+1)=len(a)*len(b')+len(a)=len(c')+len(a)=len(c)以上的乘法关系式成立。

#include<iostream>  
#include<string>  
#include<vector>  
using namespace std;  
  
int main()  
{  
    int num;  
    vector<string> v;  
    string s;  
    cin>>num;  
    for(int i = 0;i<num;i++)  
    {  
        cin>>s;  
        size_t p = s.find_first_not_of("A"); //找到第一个非A的位置，应该为P 
        if(p == string::npos ||s[p]!='P')  
        {  
            v.push_back("NO");  
            continue;  
        }  
  
        size_t t= s.find_first_not_of("A",p+1);  //找到第二个非A的位置，应该为T
        if(t== string::npos ||t==p+1|| s[t]!='T')  
        {  
            v.push_back("NO");  
            continue;  
        }  
  
        size_t n = s.find_first_not_of("A",t+1); //应该找到字符串最后 
        if(n != string::npos)  
        {  
            v.push_back("NO");  
            continue;  
        }  
  
		if((s.length()-1-t)==p*(t-p-1) )  //判断是否满足条件
        {  
            v.push_back("YES");  
        }  
        else  
        {  
            v.push_back("NO");  
        }  
    }  
    for(int i=0;i<num;i++)  
    {  
        cout<<v[i]<<endl;  
    }  
}  
